AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  monologue

  serverless system-to-system messaging solution based on AWS Lambda

Resources:
  Monologue:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: Monologue
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
      Description: >
        WSS API endpoint for a Monologue deployment.

        See https://github.com/rootstream/monologue

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - LoopbackRoute
      - SendMessageRoute
    Properties:
      ApiId: !Ref Monologue

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: latest
      Description: Latest Stable Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref Monologue

  LoopbackRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Monologue
      RouteKey: loopback
      AuthorizationType: NONE
      OperationName: LoopbackRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref LoopbackIntegration

  LoopbackIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Monologue
      Description: Loopback Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoopbackFunction.Arn}/invocations

  LoopbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: loopback/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Monologue}/*"

  LoopbackPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - Monologue
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LoopbackFunction
      Principal: apigateway.amazonaws.com

  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Monologue
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendMessageRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref SendMessageIntegration

  SendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Monologue
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: sendmessage/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Monologue}/*"

  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - Monologue
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com

Outputs:
  WebSocketURI:
    Description: "Monologue WSS Protocol URI to connect to"
    Value:
      !Join [
        "",
        [
          "wss://",
          !Ref Monologue,
          ".execute-api.",
          !Ref "AWS::Region",
          ".amazonaws.com/",
          !Ref "Stage",
        ],
      ]
