AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  RootStream Monologue

  serverless system-to-system messaging and RPC based on AWS Lambda, API Gateway, and SQS

Parameters:
  DefaultStage:
    Type: String
    Default: latest

Resources:
  Monologue:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: Monologue
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: '$request.body.route'
      Description: >
        WSS API endpoint for a Monologue deployment.

        See https://github.com/rootstream/monologue

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - DefaultRoute
      - ConnectRoute
    Properties:
      ApiId: !Ref Monologue

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref DefaultStage
      DeploymentId: !Ref Deployment
      ApiId: !Ref Monologue

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Monologue
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref AGWIntegration

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Monologue
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref AGWIntegration

  AGWIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Monologue
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterFunction.Arn}/invocations

  RouterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'monologue-${AWS::AccountId}'
      CodeUri: router/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs10.x
      Events:
        ConnectSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ConnectQueue.Arn
            BatchSize: 10
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Monologue}/*'
        - Statement:
            - Effect: Allow
              Action:
                - 'sqs:SendMessage'
                - 'sqs:SendMessageBatch'
              Resource: !Sub ${ConnectQueue.Arn}
      Environment:
        Variables:
          DEBUG: monologue:*
          CONNECT_QUEUE: !Ref ConnectQueue
          DEPLOY_REGION: !Sub ${AWS::Region}
          AGW_ENDPOINT:
            !Join ['', [!Ref Monologue, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref DefaultStage]]

  AGWRouterInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RouterFunction
      Principal: apigateway.amazonaws.com

  ConnectQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: !Sub ${ConnectDeadLetterQueue.Arn}
        maxReceiveCount: 10
  ConnectDeadLetterQueue:
    Type: AWS::SQS::Queue

Outputs:
  WebSocketURI:
    Description: 'Monologue WSS Protocol URI to connect to'
    Value: !Join ['', ['wss://', !Ref Monologue, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref 'Stage']]
