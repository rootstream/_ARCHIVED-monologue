AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  RootStream Monologue -

  serverless system-to-system messaging and RPC based on AWS Lambda, API Gateway, and SQS

Parameters:
  StageName:
    Type: String
    Default: latest

Resources:
  Monologue:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: Monologue
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: '$request.body.route'
      ApiKeySelectionExpression: '$request.header.x-api-key'
      Description: >
        WSS API endpoint for a Monologue deployment.

        See https://github.com/rootstream/monologue

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - DefaultRoute
      - ConnectRoute
    Properties:
      ApiId: !Ref Monologue

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      DeploymentId: !Ref Deployment
      ApiId: !Ref Monologue
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        DataTraceEnabled: true
        LoggingLevel: INFO

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Monologue
      RouteKey: $default
      Target: !Join ['/', ['integrations', !Ref DefaultIntegration]]

  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Monologue
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterFunction.Arn}/invocations

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Monologue
      RouteKey: $connect
      ApiKeyRequired: TRUE
      RouteResponseSelectionExpression: $default
      Target: !Join ['/', ['integrations', !Ref ConnectIntegration]]

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Monologue
      IntegrationType: MOCK
      RequestTemplates:
        200: '{"statusCode":200}'
      TemplateSelectionExpression: '200'

  ConnectIntegrationResponse:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref Monologue
      IntegrationId: !Ref ConnectIntegration
      IntegrationResponseKey: $default
      ResponseTemplates:
        200: '{"statusCode":200}'
      TemplateSelectionExpression: '*'

  RouterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: router/
      Handler: app.lambdaHandler
      MemorySize: 256
      Runtime: nodejs10.x
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Monologue}/*'
      Environment:
        Variables:
          DEBUG: monologue:*
          REGION: !Sub ${AWS::Region}
          ENDPOINT: !Join ['', [!Ref Monologue, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref StageName]]

  InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RouterFunction
      Principal: apigateway.amazonaws.com

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref Monologue
          Stage: !Ref Stage

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

Outputs:
  WebSocketURI:
    Description: 'Monologue WSS Protocol URI to connect to'
    Value: !Join ['', ['wss://', !Ref Monologue, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref 'Stage']]
